{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/video.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction UploadComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Title is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Description is required and must be less than 160 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadComponent_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(category_r5);\n  }\n}\nfunction UploadComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" Category is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UploadComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" A video file is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class UploadComponent {\n  constructor(videoService, router) {\n    this.videoService = videoService;\n    this.router = router;\n    this.selectedFile = null;\n    this.categories = ['Education', 'Entertainment', 'Lifestyle', 'Technology', 'Gaming', 'Health & Fitness', 'Science & Nature', 'Arts & Crafts', 'News & Politics', 'Sports'];\n    this.uploadForm = new FormGroup({\n      title: new FormControl('', Validators.required),\n      description: new FormControl('', [Validators.required, Validators.maxLength(160)]),\n      category: new FormControl('', Validators.required),\n      file: new FormControl(null, Validators.required)\n    });\n  }\n  onFileSelected(event) {\n    const input = event.target;\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n      // Check file extension\n      const validExtensions = ['mp4', 'avi', 'mov'];\n      const fileExtension = file.name.split('.').pop()?.toLowerCase();\n      if (fileExtension && validExtensions.includes(fileExtension)) {\n        this.selectedFile = file;\n        this.uploadForm.value.file = file;\n        if (this.isFileSizeExceedsLimit(file.size)) {\n          alert('File size should be up to 100 mb only.');\n        }\n      } else {\n        alert('Please select a valid video file (MP4, AVI, MOV).');\n        input.value = ''; // Clear the input\n      }\n    }\n  }\n\n  isFileSizeExceedsLimit(bytes) {\n    var fileSizeInMb = bytes / (1024 * 1024);\n    return fileSizeInMb > 100;\n  }\n  onSubmit() {\n    if (this.uploadForm.invalid || !this.selectedFile) {\n      return;\n    }\n    const formData = new FormData();\n    formData.append('title', this.uploadForm.get('title')?.value);\n    formData.append('description', this.uploadForm.get('description')?.value);\n    formData.append('categories', this.uploadForm.get('category')?.value);\n    formData.append('file', this.selectedFile);\n    this.videoService.uploadVideo(formData).subscribe(response => {\n      if (response.success) {\n        this.router.navigate(['/']);\n      } else {\n        alert(response.message);\n      }\n    }, error => {\n      console.error('Error uploading video', error);\n    });\n  }\n}\nUploadComponent.ɵfac = function UploadComponent_Factory(t) {\n  return new (t || UploadComponent)(i0.ɵɵdirectiveInject(i1.VideoService), i0.ɵɵdirectiveInject(i2.Router));\n};\nUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UploadComponent,\n  selectors: [[\"app-upload\"]],\n  decls: 27,\n  vars: 6,\n  consts: [[1, \"container\", \"mt-5\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"title\"], [\"type\", \"text\", \"formControlName\", \"title\", \"id\", \"title\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"description\"], [\"formControlName\", \"description\", \"id\", \"description\", \"maxlength\", \"160\", 1, \"form-control\"], [\"for\", \"category\"], [\"formControlName\", \"category\", \"id\", \"category\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"file\"], [\"type\", \"file\", \"id\", \"file\", \"accept\", \".mp4, .avi, .mov\", 1, \"form-control\", 3, \"change\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"text-danger\"], [3, \"value\"]],\n  template: function UploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Upload Video\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function UploadComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵtemplate(8, UploadComponent_div_8_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 6);\n      i0.ɵɵtext(11, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"textarea\", 7);\n      i0.ɵɵtemplate(13, UploadComponent_div_13_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 8);\n      i0.ɵɵtext(16, \"Category\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"select\", 9);\n      i0.ɵɵtemplate(18, UploadComponent_option_18_Template, 2, 2, \"option\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(19, UploadComponent_div_19_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 11)(21, \"label\", 12);\n      i0.ɵɵtext(22, \"Video File\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"input\", 13);\n      i0.ɵɵlistener(\"change\", function UploadComponent_Template_input_change_23_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(24, UploadComponent_div_24_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"button\", 14);\n      i0.ɵɵtext(26, \"Upload Video\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_4_0;\n      let tmp_5_0;\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.uploadForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.uploadForm.get(\"title\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.uploadForm.get(\"title\")) == null ? null : tmp_1_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.uploadForm.get(\"description\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.uploadForm.get(\"description\")) == null ? null : tmp_2_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.categories);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.uploadForm.get(\"category\")) == null ? null : tmp_4_0.invalid) && ((tmp_4_0 = ctx.uploadForm.get(\"category\")) == null ? null : tmp_4_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", !ctx.selectedFile && ((tmp_5_0 = ctx.uploadForm.get(\"file\")) == null ? null : tmp_5_0.touched));\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.ɵNgNoValidate, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.MaxLengthValidator, i4.FormGroupDirective, i4.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","i0","UploadComponent","constructor","videoService","router","uploadForm","title","required","description","maxLength","category","file","onFileSelected","event","input","target","files","length","validExtensions","fileExtension","name","split","pop","toLowerCase","includes","selectedFile","value","isFileSizeExceedsLimit","size","alert","bytes","fileSizeInMb","onSubmit","invalid","formData","FormData","append","get","uploadVideo","subscribe","response","success","navigate","message","error","console","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\SW-Projects\\BARBACENA_10092024\\BARBACENA_10092024.App\\ClientApp\\src\\app\\upload\\upload.component.ts","D:\\SW-Projects\\BARBACENA_10092024\\BARBACENA_10092024.App\\ClientApp\\src\\app\\upload\\upload.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { VideoService } from '../services/video.service';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css']\n})\nexport class UploadComponent {\n  uploadForm: FormGroup;\n  selectedFile: File | null = null;\n  categories: string[] = [\n    'Education',\n    'Entertainment',\n    'Lifestyle',\n    'Technology',\n    'Gaming',\n    'Health & Fitness',\n    'Science & Nature',\n    'Arts & Crafts',\n    'News & Politics',\n    'Sports'\n  ];\n\n  constructor(private videoService: VideoService, private router: Router) {\n    this.uploadForm = new FormGroup({\n      title: new FormControl('', Validators.required),\n      description: new FormControl('', [Validators.required, Validators.maxLength(160)]),\n      category: new FormControl('', Validators.required),\n      file: new FormControl(null, Validators.required),\n    });\n  }\n\n  onFileSelected(event: any) {\n    const input = event.target as HTMLInputElement;\n\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n\n      // Check file extension\n      const validExtensions = ['mp4', 'avi', 'mov'];\n      const fileExtension = file.name.split('.').pop()?.toLowerCase();\n\n      if (fileExtension && validExtensions.includes(fileExtension)) {\n        this.selectedFile = file;\n        this.uploadForm.value.file = file;\n        if (this.isFileSizeExceedsLimit(file.size)) {\n          alert('File size should be up to 100 mb only.');\n        }\n      } else {\n        alert('Please select a valid video file (MP4, AVI, MOV).');\n        input.value = ''; // Clear the input\n      }\n    }\n  }\n\n  isFileSizeExceedsLimit(bytes: number): boolean {\n    var fileSizeInMb = bytes / (1024 * 1024)\n    return fileSizeInMb > 100;\n  }\n\n  onSubmit() {\n    if (this.uploadForm.invalid || !this.selectedFile) {\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('title', this.uploadForm.get('title')?.value);\n    formData.append('description', this.uploadForm.get('description')?.value);\n    formData.append('categories', this.uploadForm.get('category')?.value);\n    formData.append('file', this.selectedFile);\n    this.videoService.uploadVideo(formData).subscribe(\n      (response) => {\n        if (response.success) {\n          this.router.navigate(['/']);\n        }\n        else {\n          alert(response.message);\n        }\n      },\n      (error) => {\n        console.error('Error uploading video', error);\n      }\n    );\n  }\n}\n","<div class=\"container mt-5\">\n  <h2>Upload Video</h2>\n  <form [formGroup]=\"uploadForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"title\">Title</label>\n      <input type=\"text\" formControlName=\"title\" class=\"form-control\" id=\"title\" />\n      <div *ngIf=\"uploadForm.get('title')?.invalid && uploadForm.get('title')?.touched\" class=\"text-danger\">\n        Title is required\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"description\">Description</label>\n      <textarea formControlName=\"description\" class=\"form-control\" id=\"description\" maxlength=\"160\"></textarea>\n      <div *ngIf=\"uploadForm.get('description')?.invalid && uploadForm.get('description')?.touched\" class=\"text-danger\">\n        Description is required and must be less than 160 characters\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"category\">Category</label>\n      <select formControlName=\"category\" class=\"form-control\" id=\"category\">\n        <option *ngFor=\"let category of categories\" [value]=\"category\">{{ category }}</option>\n      </select>\n      <div *ngIf=\"uploadForm.get('category')?.invalid && uploadForm.get('category')?.touched\" class=\"text-danger\">\n        Category is required\n      </div>\n    </div>\n\n    <div class=\"form-group mb-3\">\n      <label for=\"file\">Video File</label>\n      <input type=\"file\" (change)=\"onFileSelected($event)\" class=\"form-control\" id=\"file\" accept=\".mp4, .avi, .mov\" />\n      <div *ngIf=\"!selectedFile && uploadForm.get('file')?.touched\" class=\"text-danger\">\n        A video file is required\n      </div>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Upload Video</button>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}