{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UploadComponent = class UploadComponent {\n  constructor(videoService, router) {\n    this.videoService = videoService;\n    this.router = router;\n    this.selectedFile = null;\n    this.categories = ['Education', 'Entertainment', 'Lifestyle', 'Technology', 'Gaming', 'Health & Fitness', 'Science & Nature', 'Arts & Crafts', 'News & Politics', 'Sports'];\n    this.uploadForm = new FormGroup({\n      title: new FormControl('', Validators.required),\n      description: new FormControl('', [Validators.required, Validators.maxLength(160)]),\n      category: new FormControl('', Validators.required),\n      file: new FormControl(null, Validators.required)\n    });\n  }\n  onFileSelected(event) {\n    const input = event.target;\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n      // Check file extension\n      const validExtensions = ['mp4', 'avi', 'mov'];\n      const fileExtension = file.name.split('.').pop()?.toLowerCase();\n      if (fileExtension && validExtensions.includes(fileExtension)) {\n        this.selectedFile = file;\n        this.uploadForm.value.file = file;\n        if (this.isFileSizeExceedsLimit(file.size)) {\n          alert('File size should be up to 100 mb only.');\n        }\n      } else {\n        alert('Please select a valid video file (MP4, AVI, MOV).');\n        input.value = '';\n      }\n    }\n  }\n  isFileSizeExceedsLimit(bytes) {\n    var fileSizeInMb = bytes / (1024 * 1024);\n    return fileSizeInMb > 100;\n  }\n  onSubmit() {\n    if (this.uploadForm.errors || !this.selectedFile) {\n      return;\n    }\n    const formData = new FormData();\n    formData.append('title', this.uploadForm.get('title')?.value);\n    formData.append('description', this.uploadForm.get('description')?.value);\n    formData.append('categories', this.uploadForm.get('category')?.value);\n    formData.append('file', this.selectedFile);\n    this.videoService.uploadVideo(formData).subscribe(response => {\n      if (response.success) {\n        this.router.navigate(['/']);\n      } else {\n        alert(response.message);\n      }\n    }, error => {\n      alert(error);\n    });\n  }\n};\nUploadComponent = __decorate([Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css']\n})], UploadComponent);\nexport { UploadComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","UploadComponent","constructor","videoService","router","uploadForm","title","required","description","maxLength","category","file","onFileSelected","event","input","target","files","length","validExtensions","fileExtension","name","split","pop","toLowerCase","includes","selectedFile","value","isFileSizeExceedsLimit","size","alert","bytes","fileSizeInMb","onSubmit","errors","formData","FormData","append","get","uploadVideo","subscribe","response","success","navigate","message","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\SW-Projects\\BARBACENA_10092024\\BARBACENA_10092024.App\\ClientApp\\src\\app\\features\\upload\\upload.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { VideoService } from '../services/video.service';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-upload',\r\n  templateUrl: './upload.component.html',\r\n  styleUrls: ['./upload.component.css']\r\n})\r\nexport class UploadComponent {\r\n  uploadForm: FormGroup;\r\n  selectedFile: File | null = null;\r\n  categories: string[] = [\r\n    'Education',\r\n    'Entertainment',\r\n    'Lifestyle',\r\n    'Technology',\r\n    'Gaming',\r\n    'Health & Fitness',\r\n    'Science & Nature',\r\n    'Arts & Crafts',\r\n    'News & Politics',\r\n    'Sports'\r\n  ];\r\n\r\n  constructor(private videoService: VideoService, private router: Router) {\r\n    this.uploadForm = new FormGroup({\r\n      title: new FormControl('', Validators.required),\r\n      description: new FormControl('', [Validators.required, Validators.maxLength(160)]),\r\n      category: new FormControl('', Validators.required),\r\n      file: new FormControl(null, Validators.required),\r\n    });\r\n  }\r\n\r\n  onFileSelected(event: any) {\r\n    const input = event.target as HTMLInputElement;\r\n\r\n    if (input.files && input.files.length > 0) {\r\n      const file = input.files[0];\r\n\r\n      // Check file extension\r\n      const validExtensions = ['mp4', 'avi', 'mov'];\r\n      const fileExtension = file.name.split('.').pop()?.toLowerCase();\r\n\r\n      if (fileExtension && validExtensions.includes(fileExtension)) {\r\n        this.selectedFile = file;\r\n        this.uploadForm.value.file = file;\r\n        if (this.isFileSizeExceedsLimit(file.size)) {\r\n          alert('File size should be up to 100 mb only.');\r\n        }\r\n      } else {\r\n        alert('Please select a valid video file (MP4, AVI, MOV).');\r\n        input.value = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  isFileSizeExceedsLimit(bytes: number): boolean {\r\n    var fileSizeInMb = bytes / (1024 * 1024)\r\n    return fileSizeInMb > 100;\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.uploadForm.errors || !this.selectedFile) {\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('title', this.uploadForm.get('title')?.value);\r\n    formData.append('description', this.uploadForm.get('description')?.value);\r\n    formData.append('categories', this.uploadForm.get('category')?.value);\r\n    formData.append('file', this.selectedFile);\r\n    this.videoService.uploadVideo(formData).subscribe(\r\n      (response) => {\r\n        if (response.success) {\r\n          this.router.navigate(['/']);\r\n        }\r\n        else {\r\n          alert(response.message);\r\n        }\r\n      },\r\n      (error) => {\r\n        alert(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}